#ifndef TEST_WORD_CPP#define TEST_WORD_CPP#include "Word.h"#include "tests.h"#include "UnitTest.h"#include "Occurrence.h"#include <iostream>#include <sstream>using namespace std;// void testCompare(ostream& os);// void testWordOccurrence(ostream& os);// void testValue(ostream& os);// void testWordXML(ostream& os);class TestWord{	public:				TestWord():success(true){}				bool testWord(ostream & os){			testConstructors(os);			testCompare(os);			testOccurrences(os);			testValue(os);			testXML(os);			return success;		}			private:		void testConstructors(ostream& os){			Word word1("stuff");			word1.addOccurrence(Occurrence(URL("http://stuff.com"),1500));			Word word2(word1);			TESTM(word2.getValue() == "stuff","Expected: \"stuff\"\nActual: " + word2.getValue() + "\n");			TESTM(word2.getOccurrences()->GetFirst()->GetValue().getURL().getURLstring() == 				"http://stuff.com","Expected: \"http://stuff.com\"\nActual: " + 				word2.getOccurrences()->GetFirst()->GetValue().getURL().getURLstring() + "\n");							Word word3 = word2;			TESTM(word3.getValue() == "stuff","Expected: \"stuff\"\nActual: " + word3.getValue() + "\n");			TESTM(word3.getOccurrences()->GetFirst()->GetValue().getURL().getURLstring() == 				"http://stuff.com","Expected: \"http://stuff.com\"\nActual: " + 				word3.getOccurrences()->GetFirst()->GetValue().getURL().getURLstring() + "\n");		}			void testValue(ostream& os){			printSubheader("VALUE",os);			Word word;			TESTM(word.getValue() == "","Expected: NOTHING\nActual: " + word.getValue() + "\n");						Word word2("stuff");			TESTM(word2.getValue() == "stuff","Expected: stuff\nActual: " + word2.getValue() + "\n");			word2.setValue("stoof");			TESTM(word2.getValue() == "stoof","Expected: stoof\nActual: " + word2.getValue() + "\n");		}				void testOccurrences(ostream& os){			printSubheader("OCCURRENCES",os);			Word word1("stuff");			Occurrence occ(URL("http://stuff.com"),1500);						word1.addOccurrence(occ);			word1.addOccurrence("http://stoof.com",2200);						LinkedList<Occurrence>* ll = word1.getOccurrences();			TESTM(ll->GetFirst()->GetValue().getURL().getURLstring() == "http://stoof.com",				"Expected: http://stooff.com\nActual:" + ll->GetFirst()->GetValue().getURL().getURLstring() + "\n");			TESTM(ll->GetLast()->GetValue().getURL().getURLstring() == "http://stuff.com",				"Expected: http://stuff.com\nActual:" + ll->GetLast()->GetValue().getURL().getURLstring() + "\n");						stringstream occCount;			int occs = word1.getOccurrence("http://stuff.com");			occCount << occs;			TESTM(occs == 1500, "Expected: 1500\nActual: " + occCount.str() + "\n");		}				void testCompare(ostream& os){			printSubheader("COMPARE",os);			Word word1("hi");			Word word2("hj");			TESTM(word1.compare(word2) < 0, "tested: " + word1.getValue() + ".compare(" +				word2.getValue() + ")\nExpected negative\n");			TESTM(word2.compare(word1) > 0, "tested: " + word2.getValue() + ".compare(" +				word1.getValue() + ")\nExpected positive\n");			TESTM(word1.compare(word1) == 0, "tested: " + word1.getValue() + ".compare(" +				word1.getValue() + ")\nExpected zero\n");		}				void testXML(ostream& os){			printSubheader("XML",os);			Word word("stuff");			word.addOccurrence("http://stoof.com",1500);			word.addOccurrence("http://stuff.com",2200);						stringstream xmlStream;			stringstream errStream;			XML xml(&xmlStream,&errStream);						word.WriteXML(&xml);						stringstream expected;			expected << "<word>" << endl << "\t<value>" << endl << "\t\tstuff" << endl <<				"\t</value>" << endl << "\t<occurrence>" << endl << "\t\t<url>" << endl <<				"\t\t\thttp://stuff.com" << endl << "\t\t</url>" << endl << "\t\t<count>" <<				endl << "\t\t\t2200" << endl << "\t\t</count>" << endl << "\t</occurrence>" <<				endl << "\t<occurrence>" << endl << "\t\t<url>" << endl << "\t\t\thttp://stoof.com" <<				endl << "\t\t</url>" << endl << "\t\t<count>" << endl << "\t\t\t1500" << endl <<				"\t\t</count>" << endl << "\t</occurrence>" << endl << "</word>" << endl;						TESTM(xmlStream.str() == expected.str(),"\nExpected:\n" + expected.str() + "\nActual:\n" + xmlStream.str());			TESTM(errStream.str() == "","\nErrors in XML:\n" + errStream.str() + "\n");					}		bool success;};#endif
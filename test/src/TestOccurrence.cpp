#ifndef TEST_OCCURRENCE_CPP#define TEST_OCCURRENCE_CPP#include "Occurrence.h"#include "UnitTest.h"#include "tests.h"#include <sstream>using namespace std;class TestOccurrence{	public:		TestOccurrence():success(true){}				bool testOccurrence(ostream & os){			testCompare(os);			testValue(os);			testXML(os);			return success;		}			private:		bool success;				void testValue(ostream& os){			printSubheader("VALUE",os);			Occurrence occ(URL("http://stuff.com"),1500);						//test that values are correctly stored			TESTM(occ.getURL().getURLstring() == "http://stuff.com",				"Expected: http://stuff.com\nActual: " + occ.getURL().getURLstring() + "\n");			TESTM(occ.occurrences() == 1500, "Expected: 1500\n");		}				void testCompare(ostream& os){			printSubheader("COMPARE",os);			Occurrence occ1(URL("hi"),-1);			Occurrence occ2(URL("hj"),-1);			TESTM(occ1.compare(occ2) < 0, "tested: " + occ1.getURL().getURLstring() + ".compare(" +				occ2.getURL().getURLstring() + ")\nExpected negative\n");			TESTM(occ2.compare(occ1) > 0, "tested: " + occ2.getURL().getURLstring() + ".compare(" +				occ1.getURL().getURLstring() + ")\nExpected positive\n");			TESTM(occ1.compare(occ1) == 0, "tested: " + occ1.getURL().getURLstring() + ".compare(" +				occ1.getURL().getURLstring() + ")\nExpected zero\n");		}				void testXML(ostream& os){			printSubheader("XML",os);						Occurrence occ(URL("http://stuff.com"),1500);			stringstream xmlStream;			stringstream errStream;			XML xml(&xmlStream, &errStream);			occ.WriteXML(&xml);						stringstream expected;			expected << "<occurrence>" << endl << "\t<url>" << endl << "\t\thttp://stuff.com" << 				endl << "\t</url>" << endl << "\t<count>" << endl << "\t\t1500" << endl <<				"\t</count>" << endl << "</occurrence>" << endl;					TESTM(xmlStream.str() == expected.str(),"\nExpected:\n" + expected.str() + "\nActual:\n" +				xmlStream.str() + "\n");			TESTM(errStream.str() == "","\nErrors in XML:\n" + errStream.str() + "\n");		}};#endif
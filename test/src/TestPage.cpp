#ifndef TEST_PAGE_CPP#define TEST_PAGE_CPP#include "Page.h"#include "tests.h"#include "UnitTest.h"#include <sstream>using namespace std;class TestPage{	public:		TestPage():success(true){}				bool testPage(ostream & os){			testValues(os);			testCompare(os);			testXML(os);						return success;		}			private:		bool success;		void testValues(ostream& os){			printSubheader("VALUES",os);						Page page1("stuff");			TESTM(page1.getURL() == "stuff","expected: stuff\nActual: " + page1.getURL() + "\n");						Page page2("stuff","junk");			TESTM(page2.getURL() == "stuff","expected: stuff\nActual: " + page2.getURL());			TESTM(page2.getDescription() == "junk","expected: junk\nActual: " + page2.getDescription() + "\n");						page2.setURL("buh");			TESTM(page2.getURL() == "buh","expected: buh\nActual: " + page2.getDescription() + "\n");						page2.setDescription("saanee");			TESTM(page2.getDescription() == "saanee","expected: saanee\nActual: " + page2.getDescription() + "\n");					}				void testCompare(ostream& os){			printSubheader("COMPARE",os);			Page page1("hithere");			Page page2("hitheres");						TESTM(page1.compare(page2) < 0,"expected positive\n");			TESTM(page2.compare(page1) > 0,"expected negative\n");			TESTM(page1.compare(page1) == 0,"expecte: zero\n");					}				void testXML(ostream& os){			printSubheader("XML",os);			Page page("stuff","junk");						stringstream xmlStream;			stringstream errStream;			XML xml(&xmlStream,&errStream);			page.WriteXML(&xml);						stringstream expected;			expected << "<page>" << endl << "\t<url>" << endl << "\t\tstuff" << endl << "\t</url>" <<				endl << "\t<description>" << endl << "\t\tjunk" << endl << "\t</description>" <<				endl << "</page>" << endl;						TESTM(xmlStream.str() == expected.str(),"\nExpected:\n" + expected.str() + "\nActual:\n" +				xmlStream.str() + "\n");			TESTM(errStream.str() == "","\nErrors in XML:\n" + errStream.str() + "\n");		}}; #endif  
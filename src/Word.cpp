#include "Word.h"#include "LinkedList.h"#include "Occurrence.h"#include "URL.h"#include <string>#include <iostream>using namespace std;Word & Word::operator=(const Word & other){	wordValue = other.getValue();	*occurrences = *other.getOccurrences();}Word::Word(const Word& other){	wordValue = other.getValue();	occurrences = new LinkedList<Occurrence>(*other.getOccurrences());}Word::Word(){	occurrences = new LinkedList<Occurrence>;}Word::Word(const string str){	wordValue = str;	occurrences = new LinkedList<Occurrence>;}Word::~Word(){	delete occurrences;}const string Word::getValue() const{	return wordValue;}void Word::setValue(const string& value){	wordValue = value;}int Word::getOccurrence(const string url) const{	Occurrence occ(URL(url),-1);	LLNode<Occurrence>* node = occurrences->Find(occ,NULL);	if(node == NULL)		return 0;	return node->GetValue().occurrences();}LinkedList<Occurrence>* Word::getOccurrences() const{	return occurrences;}void Word::addOccurrence(string url, int num){	occurrences->Insert(Occurrence(URL(url),num),NULL);}void Word::addOccurrence(Occurrence occ)const{	occurrences->Insert(occ,NULL);}void Word::WriteXML(XML* xml)const{	xml->openTag("word");		xml->openTag("value");			xml->writeText(wordValue);		xml->closeTag();				occurrences->WriteXML(xml);			xml->closeTag();}int Word::compare(const Word &other)const{	return wordValue.compare(other.getValue());}